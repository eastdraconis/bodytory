generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "orderByNulls", "filteredRelationCount"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                          Int                   @id @default(autoincrement())
  createAt                    DateTime              @default(now())
  email                       String
  gender                      Gender
  name                        String
  password                    String
  phone                       String?
  updateAt                    DateTime              @updatedAt
  type                        UserType              @default(origin)
  birth                       String                @default("1993-10-23")
  accountId                   String                @unique
  Certification               Certification[]
  records                     Record[]
  hospitals                   HospitalToUser[]
  recommendMedicalDepartments RecommendDepartment[]
}

model RecommendDepartment {
  id        Int      @id
  position  Position
  recommend String
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([userId])
}

model Certification {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  number   String
  userId   Int?
  email    String?
  user     User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Record {
  id                   Int           @id @default(autoincrement())
  createAt             DateTime      @default(now())
  updateAt             DateTime      @updatedAt
  type                 RecordType
  position             Position
  description          String
  userId               Int
  diagnosis            String?
  prescription         String?
  hospitalId           Int?
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital             Hospital?     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  images               RecordImage[]
  recommendDepartments String?

  @@index([userId])
  @@index([hospitalId])
}

model RecordImage {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  recordId Int
  url      String
  record   Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@index([recordId])
}

model MedicalDepartment {
  id         Int                           @id
  department String
  hospitals  HospitalMedicalToDepartment[]
}

model Hospital {
  id                 Int                           @id @default(autoincrement())
  createAt           DateTime                      @default(now())
  updateAt           DateTime                      @updatedAt
  password           String                        @default("123456")
  name               String
  area               String
  address            String
  city               String
  class              String
  homepage           String?
  x                  Float?
  y                  Float?
  records            Record[]
  medicalDepartments HospitalMedicalToDepartment[]
  users              HospitalToUser[]

  @@fulltext([name])
}

model TestHospital {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  password String   @default("123456")
  name     String
  area     String
  address  String
  city     String
  class    String
  homepage String?
  x        Float?
  y        Float?

  @@fulltext([name])
}

model HospitalMedicalToDepartment {
  id                  Int                @id @default(autoincrement())
  medicalDepartmentId Int?
  hospitalId          Int?
  medicalDepartment   MedicalDepartment? @relation(fields: [medicalDepartmentId], references: [id], onDelete: Cascade)
  hospital            Hospital?          @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([medicalDepartmentId])
  @@index([hospitalId])
}

model HospitalToUser {
  id         Int      @id @default(autoincrement())
  hospitalId Int
  userId     Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  shared     Boolean

  @@index([hospitalId])
  @@index([userId])
}

enum Gender {
  male
  female
}

enum UserType {
  naver
  kakao
  origin
}

enum Position {
  head
  forehead
  eyes
  nose
  mouth
  cheek
  chin
  ears
  back
  waist
  hip
  neck
  chest
  stomach
  pelvis
  sexOrgan
  shoulder
  upperArm
  albow
  forearm
  wrist
  hand
  thigh
  knee
  calf
  ankle
  foot
}

enum RecordType {
  user
  hospital
}