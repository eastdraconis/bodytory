generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int             @id @default(autoincrement())
  createAt      DateTime        @default(now())
  email         String
  gender        Gender
  name          String
  password      String
  phone         String?
  updateAt      DateTime        @updatedAt
  type          UserType        @default(origin)
  birth         String          @default("1993-10-23")
  accountId     String          @unique
  Certification Certification[]
  records       Record[]
  hospitals     Hospital[]
}

model Certification {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  number   String
  userId   Int?
  email    String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Record {
  id           Int           @id @default(autoincrement())
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  type         RecordType
  position     Position
  description  String
  userId       Int
  hospitalId   Int?
  diagnosis    String?
  prescription String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital     Hospital?     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  recommend    Recommend[]
  images       RecordImage[]
}

model Recommend {
  id                Int      @id @default(autoincrement())
  createAt          DateTime @default(now())
  updateAt          DateTime @updatedAt
  MedicalDepartment String
  recordId          Int
  Record            Record   @relation(fields: [recordId], references: [id])
}

model RecordImage {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  recordId Int
  url      String
  record   Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model MedicalDepartment {
  id         Int    @id
  department String
}

model Hospital {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  password String   @default("123456")
  name     String
  area     String
  userId   Int?
  phone    String?
  address  String
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Record   Record[]
  coords   Coords[]
}

model Coords {
  id         Int      @id @default(autoincrement())
  x          Float
  y          Float
  hospitalId Int
  Hospital   Hospital @relation(fields: [hospitalId], references: [id])
}

model HospitalToMedicalDepartment {
  A Int
  B Int

  @@unique([A, B], map: "_HospitalToMedicalDepartment_AB_unique")
  @@index([B], map: "_HospitalToMedicalDepartment_B_index")
  @@map("_HospitalToMedicalDepartment")
}

enum Gender {
  male
  female
}

enum UserType {
  naver
  kakao
  origin
}

enum Position {
  head
  forehead
  eyes
  nose
  mouth
  cheek
  chin
  ears
  back
  waist
  hip
  neck
  chest
  stomach
  pelvis
  sexOrgan
  shoulder
  upperArm
  albow
  forearm
  wrist
  hand
  thigh
  knee
  calf
  ankle
  foot
}

enum RecordType {
  user
  hospital
}
