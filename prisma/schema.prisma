// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Gender {
  male
  female
}

enum UserType {
  naver
  kakao
  origin
}

model User {
  id            Int             @id @default(autoincrement())
  type          UserType        @default(origin)
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  accountId     String          @unique
  password      String
  email         String
  phone         String?
  name          String
  birth         String          @default("1993-10-23")
  gender        Gender
  records       Record[]
  hospitals     Hospital[]
  Certification Certification[]
}

model Certification {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  number   String
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?
  email    String?
}

enum Position {
  head
  forehead
  eyes
  nose
  mouth
  cheek
  chin
  ears

  back
  waist
  hip

  neck
  chest
  stomach
  pelvis
  sexOrgan

  shoulder
  upperArm
  albow
  forearm
  wrist
  hand

  thigh
  knee
  calf
  ankle
  foot
}

enum RecordType {
  user
  hospital
}

model Record {
  id          Int           @id @default(autoincrement())
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  type        RecordType
  position    Position
  description String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  hospital    Hospital?     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId  Int?
  images      RecordImage[]
}

model RecordImage {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  record   Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int
  url      String
}

model MedicalDepartment {
  id         Int        @id
  department String
  hospitals  Hospital[]
}

model Hospital {
  id                 Int                 @id
  createAt           DateTime            @default(now())
  updateAt           DateTime            @updatedAt
  password           String              @default("123456")
  name               String
  area               String
  user               User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?
  phone              String?
  address            String
  medicalDepartments MedicalDepartment[]
  Record             Record[]
}
