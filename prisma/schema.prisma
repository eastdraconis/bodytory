generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int             @id @default(autoincrement())
  createAt      DateTime        @default(now())
  email         String
  gender        Gender
  name          String
  password      String
  phone         String?
  updateAt      DateTime        @updatedAt
  type          UserType        @default(origin)
  birth         String          @default("1993-10-23")
  accountId     String          @unique
  Certification Certification[]
  records       Record[]
  hospitals     Hospital[]
}

model Certification {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  number   String
  userId   Int?
  email    String?
  user     User?    @relation(fields: [userId], references: [id])
}

model Record {
  id           Int                 @id @default(autoincrement())
  createAt     DateTime            @default(now())
  updateAt     DateTime            @updatedAt
  type         RecordType
  position     Position
  description  String
  userId       Int
  diagnosis    String?
  prescription String?
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital     Hospital?           @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId   Int?
  recommend    MedicalDepartment[]
  images       RecordImage[]
}

model RecordImage {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  recordId Int
  url      String
  record   Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model MedicalDepartment {
  id         Int                                  @id
  department String
  hospitals  HospitalMedicalDepartmentConnector[]
  Record     Record[]
}

model Hospital {
  id                 Int                                  @id @default(autoincrement())
  createAt           DateTime                             @default(now())
  updateAt           DateTime                             @updatedAt
  password           String                               @default("123456")
  name               String
  area               String
  address            String
  city               String
  class              String
  homepage           String?
  user               User[]
  Record             Record[]
  x                  Float?                               @db.Double
  y                  Float?                               @db.Double
  medicalDepartments HospitalMedicalDepartmentConnector[]
}

model HospitalMedicalDepartmentConnector {
  id                  Int                @id @default(autoincrement())
  medicalDepartment   MedicalDepartment? @relation(fields: [medicalDepartmentId], references: [id], onDelete: Cascade)
  hospital            Hospital?          @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  medicalDepartmentId Int?
  hospitalId          Int?
}

enum Gender {
  male
  female
}

enum UserType {
  naver
  kakao
  origin
}

enum Position {
  head
  forehead
  eyes
  nose
  mouth
  cheek
  chin
  ears
  back
  waist
  hip
  neck
  chest
  stomach
  pelvis
  sexOrgan
  shoulder
  upperArm
  albow
  forearm
  wrist
  hand
  thigh
  knee
  calf
  ankle
  foot
}

enum RecordType {
  user
  hospital
}